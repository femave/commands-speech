{"version":3,"sources":["commands.ts","speech.ts","index.ts"],"names":[],"mappings":"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","file":"speech-commands.94cd7c40.js","sourceRoot":"..","sourcesContent":["export default\r\n    {\r\n        \"starter_command\": \"comando\",\r\n        \"commands\": {\r\n            \"marc\": () => { console.log('Marc is the creator of web speech commands') },\r\n            \"hola\": () => { console.log('Hello world!') },\r\n            \"list of commands\": () => console.log(Object.keys(this.default.commands).map(key => key))\r\n        }\r\n    }","window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\r\nimport commands from './commands';\r\n\r\ninterface State {\r\n    isStop: boolean;\r\n    isMatch: boolean;\r\n}\r\ninterface Config {\r\n    showSpeech?: boolean,\r\n    lang?: string\r\n}\r\n\r\nexport class Speech {\r\n\r\n    private _recognition = new window.SpeechRecognition();\r\n    private _state: State = {\r\n        isStop: true,\r\n        isMatch: false\r\n    }\r\n\r\n    private _config: Config = {\r\n        showSpeech: false,\r\n        lang: 'en-EN'\r\n    }\r\n\r\n    constructor(config?: Config) {\r\n        this._recognition.interimResults = true;\r\n        this._recognition.maxAlternatives = 1;\r\n        this._recognition.continuous = true;\r\n        this._recognition.lang = 'es-ES';\r\n        this._config = { ...this._config, ...config };\r\n    }\r\n\r\n    start(): void {\r\n        this._recognition.start();\r\n        this.setState({ isStop: false });\r\n        this.listening();\r\n    };\r\n\r\n    stop(): void {\r\n        this.setState({ isStop: true });\r\n        this._recognition.stop();\r\n    };\r\n\r\n    private setState(newState) {\r\n        this._state = newState;\r\n    }\r\n\r\n    private getState() {\r\n        return this._state;\r\n    }\r\n\r\n    private listening() {\r\n        this._recognition.onresult = async event => {\r\n            if (!this.getState().isMatch) {\r\n                for (let i = event.resultIndex, len = event.results.length; i < len; i++) {\r\n                    const isCommand = await this.executeCommand(event.results[i][0].transcript.trim().toLowerCase());\r\n                    if (event.results[i].isFinal || isCommand) {\r\n                        console.log('isFinal')\r\n                        this.setState({ isMatch: false });\r\n\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get loadCommands() {\r\n        return commands.commands;\r\n    };\r\n\r\n    get starterCommand(): string {\r\n        return commands.starter_command;\r\n    }\r\n\r\n    private async executeCommand(command: string): Promise<boolean> {\r\n        const commands = this.loadCommands;\r\n        this.log(`Command used ==>  ${command}`);\r\n        return new Promise(resolve => {\r\n            if (commands[command]) {\r\n                this.setState({ isMatch: true });\r\n                commands[command]();\r\n                resolve(true);\r\n            } else {\r\n                this.log(`No commands available`);\r\n                resolve(false);\r\n            }\r\n        })\r\n    };\r\n\r\n    private log(text: string) {\r\n        if (this._config.showSpeech) {\r\n            console.log(text)\r\n        }\r\n    }\r\n}","import { Speech } from './speech';\r\n\r\nconst startBtn = document.getElementById('startBtn');\r\nstartBtn.addEventListener('click', start)\r\n\r\nfunction start() {\r\n    const speech = new Speech({showSpeech: true});\r\n    speech.start();\r\n}"]}