{"version":3,"sources":["commands.ts","speech.ts","index.ts"],"names":[],"mappings":";AAAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QACI,CACuB,gBAAA,UACP,SAAA,CACA,KAAA,WAAQ,QAAQ,IAAI,gCACnB,MAAA,WAAQ,QAAQ,IAAI;;ACH5B,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,OAAO,kBAAoB,OAAO,yBAA2B,OAAO,kBACpE,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,WAOI,SAAA,IALQ,KAAA,aAAe,IAAI,OAAO,kBAC1B,KAAA,OAAS,CACb,QAAQ,GAIH,KAAA,aAAa,gBAAiB,EAC9B,KAAA,aAAa,gBAAkB,GAC/B,KAAA,aAAa,YAAa,EAC1B,KAAA,aAAa,KAAO,QA2CjC,OAxCI,EAAA,UAAA,MAAA,WACS,KAAA,aAAa,QACb,KAAA,SAAS,CAAE,QAAQ,IACnB,KAAA,aAGT,EAAA,UAAA,KAAA,WACS,KAAA,SAAS,CAAE,QAAQ,IACnB,KAAA,aAAa,QAGd,EAAA,UAAA,SAAR,SAAiB,GACR,KAAA,OAAS,GAGV,EAAA,UAAA,SAAR,WACW,OAAA,KAAK,QAGR,EAAA,UAAA,UAAR,WAAA,IAAA,EAAA,KACS,KAAA,aAAa,SAAW,SAAA,GACpB,IAAA,IAAI,EAAI,EAAM,YAAa,EAAM,EAAM,QAAQ,OAAQ,EAAI,EAAK,IACjE,EAAK,eAAe,EAAM,QAAQ,GAAG,GAAG,WAAW,OAAO,iBAKtE,OAAA,eAAI,EAAA,UAAA,eAAY,CAAhB,IAAA,WACW,OAAA,EAAA,QAAS,UADJ,YAAA,EAzCP,cAAA,IA6CD,EAAA,UAAA,eAAR,SAAuB,GACnB,QAAQ,IAAI,GACN,IAAA,EAAW,KAAK,aACtB,QAAQ,IAAI,GACR,EAAS,IACT,EAAS,MAIrB,EAtDA,GAAa,QAAA,OAAA;;ACOZ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATD,IAAA,EAAA,QAAA,YAGM,EAAW,SAAS,eAAe,YAGzC,SAAS,KACU,IAAI,EAAA,QACZ,QAJX,EAAS,iBAAiB,QAAS","file":"speech-commands.75b5df23.js","sourceRoot":"..","sourcesContent":["export default\r\n    {\r\n        \"starter_command\": \"comando\",\r\n        \"commands\": {\r\n            \"marc\": () => { console.log('Marc is the creator of this') },\r\n            \"login\": () => { console.log(' go to login ') }\r\n        }\r\n    }","window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\r\nimport commands from './commands';\r\nexport class Speech {\r\n\r\n    private _recognition = new window.SpeechRecognition();\r\n    private _state = {\r\n        isStop: true\r\n    }\r\n\r\n    constructor() {\r\n        this._recognition.interimResults = false;\r\n        this._recognition.maxAlternatives = 10;\r\n        this._recognition.continuous = true;\r\n        this._recognition.lang = 'es-ES';\r\n    }\r\n\r\n    start(): void {\r\n        this._recognition.start();\r\n        this.setState({ isStop: false });\r\n        this.listening();\r\n    };\r\n\r\n    stop(): void {\r\n        this.setState({ isStop: true });\r\n        this._recognition.stop();\r\n    };\r\n\r\n    private setState(newState) {\r\n        this._state = newState;\r\n    }\r\n\r\n    private getState() {\r\n        return this._state;\r\n    }\r\n\r\n    private listening() {\r\n        this._recognition.onresult = event => {\r\n            for (let i = event.resultIndex, len = event.results.length; i < len; i++) {\r\n                this.executeCommand(event.results[i][0].transcript.trim().toLowerCase());\r\n            }\r\n        }\r\n    }\r\n\r\n    get loadCommands() {\r\n        return commands.commands;\r\n    };\r\n\r\n    private executeCommand(command: string): void {\r\n        console.log(command)\r\n        const commands = this.loadCommands;\r\n        console.log(commands)\r\n        if (commands[command]) {\r\n            commands[command]();\r\n        }\r\n\r\n    };\r\n}","import { Speech } from './speech';\r\n\r\n\r\nconst startBtn = document.getElementById('startBtn');\r\nstartBtn.addEventListener('click', start)\r\n\r\nfunction start() {\r\n    const speech = new Speech();\r\n    speech.start();\r\n}"]}